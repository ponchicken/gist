{"version":3,"sources":["containers/Gists.js","containers/Gist.js","containers/Login.js","helpers/fetch.js","api/get.js","containers/Sync.js","actions/user.js","constants/user.js","actions/gists.js","constants/gists.js","App.js","registerServiceWorker.js","reducers/gists.js","reducers/user.js","reducers/index.js","configureStore.js","index.js"],"names":["Gists_Gists","displayGists","gists","_this","props","data","length","map","gist","react_default","a","createElement","href","url","key","id","description","className","this","react","containers_Gists","Object","es","_ref","dispatch","Gist_Gist","e","preventDefault","containers_Gist","Login_Login","requestAccess","urlParams","query_string_default","parse","window","location","search","query","stringify","code","fetch","then","res","json","console","log","_data$token","token","access_token","error","error_description","localStorage","setItem","getCodeFromGh","client_id","scope","link","onClick","Err","name","status","message","statusText","prototype","create","Error","constructor","getItem","headers","getData","method","Authorization","path","concat","makeUrl","ok","getUser","getGists","Sync_Sync","onFetchData","containers_Sync","type","payload","catch","user_userFailure","user_fetchUser","gists_gistsFailure","gists_fetchGists","src_App","isAuthenticated","chooseStartPage","HashRouter","Link","to","Route","exact","render","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","defaultState","pending","user_defaultState","reducers","redux","arguments","undefined","action","_objectSpread","user","user_objectSpread","persistConfig","storage","localforage_default","persistedReducer","redux_persist_es","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","redux_thunk_es","persistor","react_dom_default","integration_react","loading","document","getElementById","URL","origin","addEventListener","response","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.678fb4d1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Gists extends Component {\r\n\r\n  displayGists = () => {\r\n    let gists = this.props.gists.data\r\n    if (gists.length) {\r\n      return gists.map(gist => {\r\n        return <a href={gist.url} key={gist.id}>{ gist.description }</a>\r\n      })\r\n    } else {\r\n      return <div>no gists</div>\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"gists-list\">\r\n        {this.displayGists()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapState = ({ gists }) => ({\r\n  gists\r\n})\r\n\r\nconst mapDispatch = dispatch => ({\r\n  \r\n})\r\n\r\nexport default connect(mapState, mapDispatch)(Gists)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nclass Gist extends Component {\r\n\r\n  displayGists = (e) => {\r\n    e.preventDefault()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        no gist\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// const mapState = ({  }) => ({\r\n  \r\n// })\r\n\r\nexport default connect()(Gist)","import React, { Component } from 'react'\r\nimport queryString from 'query-string'\r\n\r\nexport default class Login extends Component {\r\n\r\n  requestAccess = () => {\r\n    const urlParams = queryString.parse(window.location.search)\r\n    const query = queryString.stringify({\r\n      code: urlParams.code\r\n    })\r\n    const url = `http://localhost:3000/callback?${query}`\r\n\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        let { access_token, error } = data.token\r\n        if (error) {\r\n          console.log(data.token.error_description)\r\n          return\r\n        }\r\n        localStorage.setItem('ghtoken', access_token)\r\n      })\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  getCodeFromGh = () => {\r\n    let query = queryString.stringify({\r\n      client_id: '169a193bbe75c0e129d0',\r\n      scope: 'gist'\r\n    })\r\n    let link = `https://github.com/login/oauth/authorize?${query}`\r\n    window.location.href = link\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        login!\r\n        <button onClick={this.getCodeFromGh}>to gh</button>\r\n        {/* <a href={link}>to github</a> */}\r\n        <button onClick={this.requestAccess}>request access</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","const apiUrl = 'https://api.github.com'\r\n\r\nconst makeUrl = path => {\r\n  return `${apiUrl}${path}`\r\n}\r\n\r\nexport const prepareFetch = headers => path => () => {\r\n  console.log(headers, path)\r\n  return fetch(makeUrl(path), headers)\r\n    .then(res => {\r\n      if (res.ok)\r\n        return res.json()\r\n      else \r\n        throw new Err(res)\r\n    })\r\n}\r\n\r\n\r\nfunction Err(error) {\r\n  this.name = \"Error\"\r\n  this.status = error.status\r\n  this.message = error.statusText\r\n  this.url = error.url\r\n}\r\nErr.prototype = Object.create(Error.prototype)\r\nErr.prototype.constructor = Err","import { prepareFetch } from '../helpers/fetch'\r\n\r\nconst token = localStorage.getItem('ghtoken')\r\nconsole.log(token)\r\nconst getData = prepareFetch({\r\n  method: 'GET',\r\n  headers: {\r\n    Authorization: `token ${token}`\r\n  }\r\n})\r\n\r\nexport const getUser = getData(`/user`)\r\n\r\nexport const getGists = getData(`/gists`)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  fetchUser\r\n} from '../actions/user'\r\nimport { fetchGists } from '../actions/gists';\r\n\r\n\r\nclass Sync extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onFetchData()\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.props.onFetchData}>sync</button>       \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatch = dispatch => ({\r\n  // onFetchUser: () => fetchUser(dispatch),\r\n  onFetchData: () => {\r\n    fetchUser(dispatch)\r\n    fetchGists(dispatch)\r\n  }\r\n})\r\n\r\nexport default connect(null, mapDispatch)(Sync)","import {\r\n  FETCH_USER_REQUEST,\r\n  FETCH_USER_SUCCESS,\r\n  FETCH_USER_FAILURE\r\n} from '../constants/user'\r\n\r\nimport {\r\n  getUser\r\n} from '../api/get'\r\n\r\nexport const userRequest = () => ({\r\n  type: FETCH_USER_REQUEST\r\n})\r\n\r\nexport const userSuccess = user => ({\r\n  type: FETCH_USER_SUCCESS,\r\n  payload: user\r\n})\r\n\r\nexport const userFailure = error => ({\r\n  type: FETCH_USER_FAILURE,\r\n  payload: error\r\n})\r\n\r\nexport const fetchUser = dispatch => {\r\n  dispatch(userRequest())\r\n  getUser()\r\n    .then(data => dispatch(userSuccess(data)))\r\n    .catch(error => dispatch(userFailure(error)))\r\n}","export const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST'\r\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS'\r\nexport const FETCH_USER_FAILURE = 'FETCH_USER_FAILURE'\r\n\r\n","import {\r\n  FETCH_GISTS_REQUEST,\r\n  FETCH_GISTS_SUCCESS,\r\n  FETCH_GISTS_FAILURE\r\n} from '../constants/gists'\r\n\r\nimport {\r\n  getGists\r\n} from '../api/get'\r\n\r\nexport const gistsRequest = () => ({\r\n  type: FETCH_GISTS_REQUEST\r\n})\r\n\r\nexport const gistsSuccess = gists => ({\r\n  type: FETCH_GISTS_SUCCESS,\r\n  payload: gists\r\n})\r\n\r\nexport const gistsFailure = error => ({\r\n  type: FETCH_GISTS_FAILURE,\r\n  payload: error\r\n})\r\n\r\nexport const fetchGists = dispatch => {\r\n  dispatch(gistsRequest())\r\n  getGists()\r\n    .then(data => dispatch(gistsSuccess(data)))\r\n    .catch(error => dispatch(gistsFailure(error)))\r\n}","export const FETCH_GISTS_REQUEST = 'FETCH_GISTS_REQUEST'\r\nexport const FETCH_GISTS_SUCCESS = 'FETCH_GISTS_SUCCESS'\r\nexport const FETCH_GISTS_FAILURE = 'FETCH_GISTS_FAILURE'","import React, { Component } from 'react'\r\nimport { HashRouter as Router, Route, Link } from 'react-router-dom'\r\n// import Todo from './containers/Todo'\r\nimport Gists from './containers/Gists';\r\nimport Gist from './containers/Gist';\r\nimport Login from './containers/Login';\r\nimport Sync from './containers/Sync';\r\n\r\nclass App extends Component {\r\n\r\n  isAuthenticated = false\r\n\r\n  chooseStartPage = (props) => {\r\n    if (this.isAuthenticated) {\r\n      return (\r\n        <Gist />\r\n      ) \r\n    } else {\r\n      console.log('should redirect')\r\n      return (\r\n        <Gist />\r\n      ) \r\n      // window.location = 'https://github.com/login/oauth/authorize?client_id=169a193bbe75c0e129d0&redirect_uri=/gist'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // <Router basename={process.env.PUBLIC_URL}>\r\n      <Router>\r\n        <div className=\"app\">\r\n          <header>\r\n            <nav>\r\n              <Link to={'/'}>home</Link>\r\n              <Link to={'/gist'}>gist</Link>\r\n              <Link to={'/login'}>login</Link>\r\n            </nav>\r\n            <Sync />\r\n          </header>\r\n          <aside>\r\n            <Gists />\r\n          </aside>\r\n          <main>\r\n            <Route exact path=\"/\" render={this.chooseStartPage} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/gist\" component={Gist} />\r\n          </main>\r\n          <footer>\r\n            footer\r\n          </footer>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  FETCH_GISTS_REQUEST,\r\n  FETCH_GISTS_SUCCESS,\r\n  FETCH_GISTS_FAILURE\r\n} from '../constants/gists'\r\n\r\nconst defaultState = {\r\n  pending: false,\r\n  data: {},\r\n  error: ''\r\n}\r\n\r\nexport const gists = (state=defaultState, action) => {\r\n  switch(action.type) {\r\n    case FETCH_GISTS_REQUEST:\r\n      return {\r\n        ...state,\r\n        pending: true\r\n      }\r\n    case FETCH_GISTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        data: action.payload,\r\n        error: defaultState.error\r\n      }\r\n    case FETCH_GISTS_FAILURE:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        data: defaultState.data,\r\n        error: action.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import {\r\n  FETCH_USER_REQUEST,\r\n  FETCH_USER_SUCCESS,\r\n  FETCH_USER_FAILURE\r\n} from '../constants/user'\r\n\r\nconst defaultState = {\r\n  pending: false,\r\n  data: {},\r\n  error: ''\r\n}\r\n\r\nexport const user = (state=defaultState, action) => {\r\n  switch(action.type) {\r\n    case FETCH_USER_REQUEST:\r\n      return {\r\n        ...state,\r\n        pending: true\r\n      }\r\n    case FETCH_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        data: action.payload,\r\n        error: defaultState.error\r\n      }\r\n    case FETCH_USER_FAILURE:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        data: defaultState.data,\r\n        error: action.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport { gists } from './gists'\r\nimport { user } from './user'\r\n\r\nconst rootReducer = combineReducers({\r\n  gists,\r\n  user\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'localforage'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './reducers'\r\n\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const store = createStore(persistedReducer, composeEnhancers(\r\n  applyMiddleware(\r\n    thunk\r\n  )\r\n))\r\nexport const persistor = persistStore(store)","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\n// import promiseMiddleware from 'redux-promise'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport App from './App';\r\nimport './assets/styles/style.scss'\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport { store, persistor } from './configureStore'\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\nregisterServiceWorker()\r\n"],"sourceRoot":""}