{"version":3,"sources":["actions/gist.js","constants/gist.js","containers/Gists.js","components/GistData.js","containers/Gist.js","constant.js","actions/login.js","containers/Login.js","api/index.js","api/get.js","api/patch.js","actions/gists.js","containers/Sync.js","actions/user.js","constants/user.js","constants/gists.js","App.js","registerServiceWorker.js","reducers/gist.js","helpers/createReducers.js","reducers/gists.js","reducers/user.js","reducers/login.js","reducers/index.js","configureStore.js","index.js"],"names":["fetchGistFile","gist","dispatch","type","payload","name","file","filename","id","fetch","raw_url","then","res","text","data","gist_fileSuccess","catch","error","gist_fileFailure","Gists_Gists","displayGists","gists","_this","props","length","map","react_default","a","createElement","onClick","setGist","key","description","className","this","react","containers_Gists","Object","es","_ref","e","preventDefault","gist_setActiveGist","loadGistFiles","GistData","updateGist","changeFileData","getFileData","keys","files","filelang","language","toLowerCase","lang","prism_default","languages","hasOwnProperty","content","lib_default","value","onValueChange","highlight","code","padding","style","fontFamily","fontSize","getFile","Gist_Gist","Gist","Gist_classCallCheck","Gist_possibleConstructorReturn","Gist_getPrototypeOf","call","displayGist","active","find","item","onUpdateGist","changeCode","setState","handleKeyboard","ctrlKey","metaKey","String","fromCharCode","which","state","window","addEventListener","removeEventListener","containers_Gist","loadFile","gist_changeGist","login_getGhCode","redirect_uri","location","origin","pathname","query","query_string_default","stringify","client_id","scope","link","href","Login_Login","loading","login","pending","_this$props","onFetchToken","isAuth","user","html_url","src","avatar_url","alt","onLogout","containers_Login","urlParams","parse","search","url","json","_data$token","token","access_token","login_tokenError","localStorage","setItem","login_fetchToken","removeItem","makeUrl","path","concat","headers","Authorization","getItem","response","ok","Err","status","message","statusText","prototype","create","Error","constructor","method","getData","getUser","getGists","patchData","body","JSON","prepareJsonPost","gists_loadGistsFiles","forEach","gists_updateGists","console","log","changedGists","filter","changed","patchGist","gist_updateGistSuccess","ex","finally","Sync_Sync","onFetchData","onUpdateGists","patching","containers_Sync","user_userFailure","user_fetchUser","gists_gistsSuccess","gists_gistsFailure","gists_fetchGists","src_App","isAuthenticated","BrowserRouter","basename","Route","exact","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","createReducer","initialState","handlers","arguments","undefined","action","defaultState","gists_gists","gists_defineProperty","_createReducer","gists_objectSpread","_objectSpread","_action$payload","newState","gistIndex","findIndex","_action$payload2","index","user_defaultState","login_defaultState","login_defineProperty","login_createReducer","login_objectSpread","reducers","redux","user_objectSpread","persistConfig","storage","localforage_default","persistedReducer","redux_persist_es","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","redux_thunk_es","persistor","react_dom_default","render","integration_react","document","getElementById","URL","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.534d0533.chunk.js","sourcesContent":["import {\r\n  SET_ACTIVE_GIST,\r\n  FETCH_GIST_FILE_REQUEST,\r\n  FETCH_GIST_FILE_SUCCESS,\r\n  FETCH_GIST_FILE_FAILURE\r\n} from '../constants/gist'\r\n\r\nimport {\r\n  CHANGE_GIST,\r\n  UPDATE_GIST_SUCCESS,\r\n  UPDATE_GIST_ERROR\r\n} from '../constant'\r\n\r\n\r\nexport const setActiveGist = id => ({\r\n  type: SET_ACTIVE_GIST,\r\n  payload: id\r\n})\r\n \r\nexport const fileRequest = data => ({\r\n  type: FETCH_GIST_FILE_REQUEST,\r\n  payload: data\r\n})\r\n\r\nexport const fileSuccess = data => ({\r\n  type: FETCH_GIST_FILE_SUCCESS,\r\n  payload: data\r\n})\r\n\r\nexport const fileFailure = error => ({\r\n  type: FETCH_GIST_FILE_FAILURE,\r\n  payload: error\r\n})\r\n\r\nexport const changeGist = gist => ({\r\n  type: CHANGE_GIST,\r\n  payload: gist\r\n})\r\n\r\nexport const updateGistSuccess = gist => ({\r\n  type: UPDATE_GIST_SUCCESS,\r\n  payload: gist\r\n})\r\n\r\nexport const updateGistError = error => ({\r\n  type: UPDATE_GIST_ERROR,\r\n  payload: error\r\n})\r\n\r\nexport const loadGistFiles = gist => dispatch => {\r\n  Object.keys(gist.files).forEach(name => {\r\n    dispatch(fetchGistFile({\r\n      id: gist.id,\r\n      file: gist.files[name]\r\n    }))\r\n  })\r\n}\r\n\r\nexport const fetchGistFile = gist => dispatch => {\r\n  dispatch(fileRequest({\r\n    name: gist.file.filename,\r\n    id: gist.id\r\n  }))\r\n  fetch(gist.file.raw_url)\r\n    .then(res => res.text())\r\n    .then(data => {\r\n      dispatch(fileSuccess({\r\n        id: gist.id,\r\n        name: gist.file.filename,\r\n        data\r\n      }))\r\n    })\r\n    .catch(error => dispatch(fileFailure(error)))\r\n}","export const SET_ACTIVE_GIST = 'SET_ACTIVE_GIST'\r\nexport const FETCH_GIST_FILE = 'FETCH_GIST_FILE'\r\nexport const FETCH_GIST_FILE_REQUEST = 'FETCH_GIST_FILE_REQUEST'\r\nexport const FETCH_GIST_FILE_SUCCESS = 'FETCH_GIST_FILE_SUCCESS'\r\nexport const FETCH_GIST_FILE_FAILURE = 'FETCH_GIST_FILE_FAILURE'","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setActiveGist } from '../actions/gist'\r\n\r\nclass Gists extends Component {\r\n\r\n  displayGists = () => {\r\n    let gists = this.props.gists.data\r\n    if (gists.length) {\r\n      return gists.map(gist => {\r\n        return <button onClick={this.props.setGist(gist.id)} key={gist.id}>{ gist.description }</button>\r\n      })\r\n    } else {\r\n      return <div>no gists</div>\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"gists-list\">\r\n        {this.displayGists()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapState = ({ gists }) => ({\r\n  gists\r\n})\r\n\r\nconst mapDispatch = dispatch => ({\r\n  setGist: id => e => {\r\n    e.preventDefault()\r\n    dispatch(setActiveGist(id))\r\n  },\r\n  loadGistFiles: gist => {\r\n    // let files = gist.files\r\n    // files.map(file => {\r\n    //   file\r\n    // })\r\n  }\r\n})\r\n\r\nexport default connect(mapState, mapDispatch)(Gists)","import React from 'react'\r\nimport Editor from 'react-simple-code-editor'\r\nimport Prism from 'prismjs'\r\n\r\nexport default ({ gist, updateGist, changeFileData, getFileData }) => {\r\n  function getFile (filename) {\r\n    let file = gist.files[filename]\r\n    let filelang = (file.language) ? file.language.toLowerCase() : 'clike'\r\n    let lang = (Prism.languages.hasOwnProperty(filelang)) ? filelang : 'clike'\r\n    let content = getFileData(filename) || ''\r\n       \r\n\r\n    return (\r\n      <div key={filename} className=\"gist\">\r\n        <h3>{filename}</h3>\r\n        <Editor\r\n          className=\"gist-editor\"\r\n          value={content}\r\n          onValueChange={changeFileData(filename)} \r\n          highlight={code => {\r\n            return Prism.highlight(code, Prism.languages[lang])\r\n          }}\r\n          padding={10}\r\n          style={{\r\n            fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n            fontSize: 14,\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function getFiles () {\r\n    const result = Object.keys(gist.files).map(filename => {\r\n      return getFile(filename)\r\n    })\r\n    return result\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{gist.description}</h3>\r\n      <div>\r\n        {getFiles()}\r\n      </div>\r\n      <button onClick={updateGist(gist)}>Submit</button>\r\n    </div>\r\n  )\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport GistData from '../components/GistData'\r\n\r\nimport {\r\n  fetchGistFile,\r\n  changeGist\r\n} from '../actions/gist'\r\n\r\n\r\nclass Gist extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      code: ''\r\n    }\r\n  }\r\n\r\n  displayGist = () => {\r\n    let {\r\n      gists\r\n    } = this.props\r\n    if (!gists.active)\r\n      return 'no active gist'\r\n    else {\r\n      this.gist = gists.data.find(item => item.id === gists.active)\r\n      return <GistData \r\n        gist={this.gist} \r\n        updateGist={this.props.onUpdateGist}\r\n        changeFileData={this.changeFileData}\r\n        changeCode={this.changeCode}\r\n        getFileData={this.getFileData}\r\n      />\r\n    }\r\n  }\r\n\r\n  getFileData = filename => {\r\n    return this.gist.files[filename].content\r\n  }\r\n\r\n  changeFileData = filename => code => {\r\n    this.setState({ code })\r\n    this.gist.files[filename].content = code\r\n  }\r\n\r\n  handleKeyboard = (e) => {\r\n    if (e.ctrlKey || e.metaKey) {\r\n      switch (String.fromCharCode(e.which).toLowerCase()) {\r\n        case 's':\r\n          if (this.gist) this.props.onUpdateGist(this.gist)(e)\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyboard)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeyboard);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        { this.displayGist() }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapState = ({ gists }) => ({\r\n  gists\r\n})\r\n\r\nconst mapDispatch = dispatch => ({\r\n  loadFile: (data) => e => {\r\n    dispatch(fetchGistFile(data))\r\n  },\r\n  onUpdateGist: (gist) => e => {\r\n    if (e) e.preventDefault()\r\n    dispatch(changeGist(gist))\r\n  }\r\n})\r\n\r\nexport default connect(mapState, mapDispatch)(Gist)","export const FETCH_GH_TOKEN_REQUEST = 'FETCH_GH_TOKEN_REQUEST'\r\nexport const FETCH_GH_TOKEN_SUCCESS = 'FETCH_GH_TOKEN_SUCCESS'\r\nexport const FETCH_GH_TOKEN_ERROR = 'FETCH_GH_TOKEN_ERROR'\r\nexport const LOGOUT = 'LOGOUT'\r\n\r\nexport const CHANGE_GIST = 'CHANGE_GIST'\r\n\r\nexport const UPDATE_GIST = 'UPDATE_GIST'\r\nexport const UPDATE_GIST_SUCCESS = 'UPDATE_GIST_SUCCESS'\r\nexport const UPDATE_GIST_ERROR = 'UPDATE_GIST_ERROR'\r\n\r\nexport const UPDATE_GISTS_START = 'UPDATE_GISTS_START'\r\nexport const UPDATE_GISTS_FINISH = 'UPDATE_GISTS_FINISH'","import {\r\n  FETCH_GH_TOKEN_REQUEST,\r\n  FETCH_GH_TOKEN_SUCCESS,\r\n  FETCH_GH_TOKEN_ERROR,\r\n  LOGOUT\r\n} from '../constant'\r\n\r\nimport queryString from 'query-string'\r\n\r\nconst tokenRequest = () => ({\r\n  type: FETCH_GH_TOKEN_REQUEST\r\n})\r\n\r\nconst tokenSuccess = (token) => ({\r\n  type: FETCH_GH_TOKEN_SUCCESS,\r\n  payload: token\r\n})\r\n\r\nconst tokenError = (error) => ({\r\n  type: FETCH_GH_TOKEN_ERROR,\r\n  payload: error,\r\n  error: true\r\n})\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem('ghtoken')\r\n  return {\r\n    type: LOGOUT\r\n  }\r\n}\r\n\r\nexport const getGhCode = () => {\r\n  let redirect_uri = window.location.origin + window.location.pathname\r\n  let query = queryString.stringify({\r\n    client_id: '169a193bbe75c0e129d0',\r\n    scope: 'gist',\r\n    redirect_uri\r\n  })\r\n  let link = `https://github.com/login/oauth/authorize?${query}`\r\n  window.location.href = link\r\n}\r\n\r\nexport const fetchToken = dispatch => {\r\n  const urlParams = queryString.parse(window.location.search)\r\n  if (!urlParams.code) return\r\n  const query = queryString.stringify({\r\n    code: urlParams.code\r\n  })\r\n  const url = `https://server-aenjidvwww.now.sh/callback?${query}`\r\n  dispatch(tokenRequest())\r\n\r\n  fetch(url)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      let { access_token, error } = data.token\r\n      if (error) {\r\n        dispatch(tokenError(error))\r\n        return\r\n      }\r\n      localStorage.setItem('ghtoken', access_token)\r\n      dispatch(tokenSuccess(access_token))\r\n    })\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  getGhCode,\r\n  fetchToken,\r\n  logout\r\n} from '../actions/login'\r\n\r\nclass Login extends Component {\r\n\r\n  loading = () => {\r\n    if (this.props.login.pending) \r\n    return 'loading...'\r\n  }\r\n\r\n  componentDidMount () {\r\n    let {\r\n      login,\r\n      onFetchToken\r\n    } = this.props\r\n    if (!login.isAuth)\r\n      onFetchToken()\r\n  }\r\n\r\n  render() {\r\n    let user = this.props.user.data\r\n    return (\r\n      <div className=\"header-user\">\r\n        <a href={user.html_url} className=\"header-user-name\">\r\n          <img src={user.avatar_url} alt=\"\" className=\"header-user-img\" />\r\n          { user.login }\r\n        </a>\r\n        \r\n        { this.loading() }\r\n        <button onClick={getGhCode}>Login</button>\r\n        <button onClick={this.props.onLogout}>Logout</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapState = ({ login, user }) => ({\r\n  login, user\r\n})\r\n\r\nconst mapDispatch = dispatch => ({\r\n  onFetchToken: () => {\r\n    fetchToken(dispatch)\r\n  },\r\n  onLogout: () => {\r\n    dispatch(logout())\r\n  }\r\n})\r\n\r\nexport default connect(mapState, mapDispatch)(Login)","const apiUrl = 'https://api.github.com'\r\n\r\nconst makeUrl = path => {\r\n  return `${apiUrl}${path}`\r\n}\r\n\r\nconst headers = {\r\n    Authorization: `token ${localStorage.getItem('ghtoken')}`\r\n}\r\n\r\nexport const prepareJsonFetch = method => path => url => {\r\n  url = url || makeUrl(path)\r\n  return fetch(url, {\r\n      method,\r\n      headers,\r\n    })\r\n    .then(response)\r\n}\r\n\r\nexport const prepareJsonPost = method => path => body => {\r\n  return fetch(makeUrl(path), {\r\n      method,\r\n      headers,\r\n      body: JSON.stringify( body ) \r\n    })\r\n    .then(response)\r\n}\r\n\r\nconst response = res => {\r\n  if (res.ok)\r\n    return res.json()\r\n  else \r\n    throw new Err(res)\r\n}\r\n\r\nfunction Err(error) {\r\n  this.name = \"Error\"\r\n  this.status = error.status\r\n  this.message = error.statusText\r\n  this.url = error.url\r\n}\r\nErr.prototype = Object.create(Error.prototype)\r\nErr.prototype.constructor = Err","import { prepareJsonFetch } from './index'\r\n\r\nconst getData = prepareJsonFetch('GET')\r\n\r\nexport const getUser = getData(`/user`)\r\nexport const getGists = getData(`/gists`)","import { prepareJsonPost } from './index'\r\n\r\nconst patchData = prepareJsonPost('PATCH')\r\n\r\nexport const patchGist = (gist) => patchData(`/gists/${gist.id}`)(gist)","import {\r\n  FETCH_GISTS_REQUEST,\r\n  FETCH_GISTS_SUCCESS,\r\n  FETCH_GISTS_FAILURE\r\n} from '../constants/gists'\r\n\r\n\r\nimport {\r\n  UPDATE_GISTS_START,\r\n  UPDATE_GISTS_FINISH\r\n} from '../constant'\r\n\r\nimport {\r\n  getGists\r\n} from '../api/get'\r\nimport { patchGist } from '../api/patch'\r\n\r\nimport {\r\n  loadGistFiles,\r\n  updateGistSuccess,\r\n  updateGistError\r\n} from './gist'\r\n\r\nexport const gistsRequest = () => ({\r\n  type: FETCH_GISTS_REQUEST\r\n})\r\n\r\nexport const updateGistsStart = () => ({\r\n  type: UPDATE_GISTS_START\r\n})\r\n\r\nexport const updateGistsFinish = () => ({\r\n  type: UPDATE_GISTS_FINISH\r\n})\r\n\r\nexport const gistsSuccess = gists => ({\r\n  type: FETCH_GISTS_SUCCESS,\r\n  payload: gists\r\n})\r\n\r\nexport const gistsFailure = error => ({\r\n  type: FETCH_GISTS_FAILURE,\r\n  payload: error\r\n})\r\n\r\nexport const fetchGists = dispatch => {\r\n  dispatch(gistsRequest())\r\n  getGists()\r\n    .then(gists => {\r\n      dispatch(gistsSuccess(gists))\r\n      dispatch(loadGistsFiles(gists))\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n      return dispatch(gistsFailure(error))\r\n    })\r\n}\r\n\r\nexport const loadGistsFiles = gists => dispatch => {\r\n  gists.forEach(gist => {\r\n    dispatch(loadGistFiles(gist))\r\n  })\r\n}\r\n\r\nexport const updateGists = gists => dispatch => {\r\n  console.log('updateGists')\r\n  const changedGists = gists.data.filter(gist => gist.changed)\r\n  changedGists.forEach(gist => {\r\n    dispatch(updateGistsStart())\r\n    patchGist(gist)\r\n      .then(gist => {\r\n        dispatch(updateGistSuccess(gist))\r\n      })\r\n      .catch(ex => {\r\n        dispatch(updateGistError(ex))\r\n      })\r\n      .finally(res => {\r\n        dispatch(updateGistsFinish())\r\n      })\r\n  })\r\n  return changedGists\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  fetchUser\r\n} from '../actions/user'\r\nimport { fetchGists, updateGists } from '../actions/gists';\r\n\r\n\r\nclass Sync extends Component {\r\n\r\n  componentDidMount() {\r\n    // this.props.onFetchData()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.props.onFetchData}>pull</button>     \r\n        <button onClick={this.props.onUpdateGists(this.props.gists)}>push</button>\r\n        { this.props.gists.patching ? 'updating gists on github' : ''}      \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapState = ({ gists }) => ({\r\n  gists\r\n})\r\n\r\nconst mapDispatch = dispatch => ({\r\n  onFetchData: () => {\r\n    fetchUser(dispatch)\r\n    fetchGists(dispatch)\r\n  },\r\n  onUpdateGists: (gists) => () => {\r\n    dispatch(updateGists(gists))\r\n  }\r\n})\r\n\r\nexport default connect(mapState, mapDispatch)(Sync)","import {\r\n  FETCH_USER_REQUEST,\r\n  FETCH_USER_SUCCESS,\r\n  FETCH_USER_FAILURE\r\n} from '../constants/user'\r\n\r\nimport {\r\n  getUser\r\n} from '../api/get'\r\n\r\nexport const userRequest = () => ({\r\n  type: FETCH_USER_REQUEST\r\n})\r\n\r\nexport const userSuccess = user => ({\r\n  type: FETCH_USER_SUCCESS,\r\n  payload: user\r\n})\r\n\r\nexport const userFailure = error => ({\r\n  type: FETCH_USER_FAILURE,\r\n  payload: error\r\n})\r\n\r\nexport const fetchUser = dispatch => {\r\n  dispatch(userRequest())\r\n  getUser()\r\n    .then(data => dispatch(userSuccess(data)))\r\n    .catch(error => dispatch(userFailure(error)))\r\n}","export const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST'\r\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS'\r\nexport const FETCH_USER_FAILURE = 'FETCH_USER_FAILURE'\r\n\r\n","export const FETCH_GISTS_REQUEST = 'FETCH_GISTS_REQUEST'\r\nexport const FETCH_GISTS_SUCCESS = 'FETCH_GISTS_SUCCESS'\r\nexport const FETCH_GISTS_FAILURE = 'FETCH_GISTS_FAILURE'","import React, { Component } from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\n// import Todo from './containers/Todo'\r\nimport Gists from './containers/Gists';\r\nimport Gist from './containers/Gist';\r\nimport Login from './containers/Login';\r\nimport Sync from './containers/Sync';\r\n\r\nclass App extends Component {\r\n\r\n  isAuthenticated = false\r\n\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n      {/* <Router> */}\r\n        <div className=\"app\">\r\n          <header className=\"header\">\r\n            <Sync />\r\n            <Login />\r\n          </header>\r\n          <aside>\r\n            <Gists />\r\n          </aside>\r\n          <main>\r\n            <Route exact path=\"/\" component={Gist} />\r\n          </main>\r\n          <footer>\r\n            footer\r\n          </footer>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const setActiveGist = (state, action) => ({\r\n  ...state,\r\n  active: action.payload\r\n})\r\nexport const fetchGistFileRequest = (state, action) => {\r\n  let {\r\n    name, id\r\n  } = action.payload\r\n  let newState = {...state}\r\n\r\n  let gistIndex = newState.data.findIndex(gist => gist.id === id)\r\n  let file = newState.data[gistIndex].files[name]\r\n  file.pending = true\r\n  return newState\r\n}\r\n\r\nexport const fetchGistFileSuccess = (state, action) => {\r\n  let {\r\n    id, name, data\r\n  } = action.payload\r\n  let newState = {...state}\r\n  let gistIndex = newState.data.findIndex(gist => gist.id === id)\r\n  let file = newState.data[gistIndex].files[name]\r\n  file.pending = false\r\n  file.content = data\r\n  return newState\r\n}\r\n\r\nexport const fetchGistFileFailure = (state, action) => {\r\n  return state\r\n}\r\n\r\nexport const changeGist = (state, action) => {\r\n  let newState = {...state}\r\n  let gist = action.payload\r\n  gist.changed = true\r\n  let index = state.data.findIndex(item => item.id === gist.id)\r\n  newState.data[index] = gist\r\n  return newState\r\n}","export function createReducer(initialState, handlers) {\r\n  return function reducer(state = initialState, action) {\r\n    if (handlers.hasOwnProperty(action.type)) {\r\n      return handlers[action.type](state, action)\r\n    } else {\r\n      return state\r\n    }\r\n  }\r\n}","import {\r\n  FETCH_GISTS_REQUEST,\r\n  FETCH_GISTS_SUCCESS,\r\n  FETCH_GISTS_FAILURE\r\n} from '../constants/gists'\r\n\r\nimport {\r\n  SET_ACTIVE_GIST,\r\n  FETCH_GIST_FILE_REQUEST,\r\n  FETCH_GIST_FILE_SUCCESS,\r\n  FETCH_GIST_FILE_FAILURE\r\n} from '../constants/gist'\r\n\r\nimport {\r\n  CHANGE_GIST,\r\n  UPDATE_GISTS_START,\r\n  UPDATE_GISTS_FINISH\r\n} from '../constant'\r\n\r\nimport {\r\n  setActiveGist,\r\n  fetchGistFileRequest,\r\n  fetchGistFileSuccess,\r\n  fetchGistFileFailure,\r\n  changeGist\r\n} from './gist'\r\n\r\nimport { createReducer } from '../helpers/createReducers'\r\n\r\nconst defaultState = {\r\n  pending: false,\r\n  data: {},\r\n  error: ''\r\n}\r\n\r\nconst fetchGistsRequest = (state) => ({\r\n  ...state,\r\n  pending: true\r\n})\r\n\r\nconst fetchGistsSuccess = (state, action) => ({\r\n  ...state,\r\n  pending: false,\r\n  data: action.payload,\r\n  error: defaultState.error\r\n})\r\n\r\nconst fetchGistsFailure = (state, action) => ({\r\n  ...state,\r\n  pending: false,\r\n  error: action.payload\r\n})\r\n\r\nconst updateGistsStart = (state) =>({\r\n  ...state,\r\n  patching: true\r\n})\r\n\r\nconst updateGistsFinish = (state) => ({\r\n  ...state,\r\n  patching: false\r\n})\r\n\r\nexport const gists = createReducer(defaultState, {\r\n  [FETCH_GISTS_REQUEST]: fetchGistsRequest,\r\n  [FETCH_GISTS_SUCCESS]: fetchGistsSuccess,\r\n  [FETCH_GISTS_FAILURE]: fetchGistsFailure,\r\n  [SET_ACTIVE_GIST]: setActiveGist,\r\n  [FETCH_GIST_FILE_REQUEST]: fetchGistFileRequest,\r\n  [FETCH_GIST_FILE_SUCCESS]: fetchGistFileSuccess,\r\n  [FETCH_GIST_FILE_FAILURE]: fetchGistFileFailure,\r\n  [CHANGE_GIST]: changeGist,\r\n  [UPDATE_GISTS_START]: updateGistsStart,\r\n  [UPDATE_GISTS_FINISH]: updateGistsFinish\r\n})\r\n\r\n","import {\r\n  FETCH_USER_REQUEST,\r\n  FETCH_USER_SUCCESS,\r\n  FETCH_USER_FAILURE\r\n} from '../constants/user'\r\n\r\nconst defaultState = {\r\n  pending: false,\r\n  data: {},\r\n  error: ''\r\n}\r\n\r\nexport const user = (state=defaultState, action) => {\r\n  switch(action.type) {\r\n    case FETCH_USER_REQUEST:\r\n      return {\r\n        ...state,\r\n        pending: true\r\n      }\r\n    case FETCH_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        data: action.payload,\r\n        error: defaultState.error\r\n      }\r\n    case FETCH_USER_FAILURE:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        data: defaultState.data,\r\n        error: action.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import {\r\n  FETCH_GH_TOKEN_REQUEST,\r\n  FETCH_GH_TOKEN_SUCCESS,\r\n  FETCH_GH_TOKEN_ERROR,\r\n  LOGOUT\r\n} from '../constant'\r\n\r\n\r\nimport { createReducer } from '../helpers/createReducers'\r\n\r\nconst defaultState = {\r\n  pending: false,\r\n  token: '',\r\n  error: {},\r\n  isAuth: false\r\n}\r\n\r\nconst fetchGhTokenRequest = (state) => ({\r\n  ...state,\r\n  pending: true\r\n})\r\n\r\nconst fetchGhTokenSuccess = (state, action) => ({\r\n  pending: false,\r\n  token: action.payload,\r\n  error: defaultState.error,\r\n  isAuth: true\r\n})\r\n\r\nconst fetchGhTokenError = (state, action) => ({\r\n  ...state,\r\n  pending: false,\r\n  error: action.payload\r\n})\r\n\r\nconst logout = (state) => ({\r\n  ...state,\r\n  token: defaultState.token,\r\n  isAuth: false\r\n})\r\n\r\nexport const login = createReducer(defaultState, {\r\n  [FETCH_GH_TOKEN_REQUEST]: fetchGhTokenRequest,\r\n  [FETCH_GH_TOKEN_SUCCESS]: fetchGhTokenSuccess,\r\n  [FETCH_GH_TOKEN_ERROR]: fetchGhTokenError,\r\n  [LOGOUT]: logout\r\n})\r\n","import { combineReducers } from 'redux'\r\nimport { gists } from './gists'\r\nimport { user } from './user'\r\nimport { login } from './login'\r\n\r\nconst rootReducer = combineReducers({\r\n  gists,\r\n  user,\r\n  login\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'localforage'\r\n// import storage from 'redux-persist/lib/storage'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './reducers'\r\n\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const store = createStore(persistedReducer, composeEnhancers(\r\n  applyMiddleware(\r\n    thunk\r\n  )\r\n))\r\nexport const persistor = persistStore(store)","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\n// import promiseMiddleware from 'redux-promise'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport App from './App';\r\nimport './assets/styles/style.scss'\r\nimport 'prismjs/themes/prism-tomorrow.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport { store, persistor } from './configureStore'\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\nregisterServiceWorker()\r\n"],"sourceRoot":""}